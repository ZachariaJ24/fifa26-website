// Midnight Studios INTl - All rights reserved
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Skeleton } from "@/components/ui/skeleton"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import DailyRecapDisplay from "@/components/shared/daily-recap-display"
import { BarChart3, RefreshCw, AlertCircle, CheckCircle } from "lucide-react"

interface RecapData {
  date: string
  team_recaps: any[]
  best_team?: any
  worst_team?: any
  total_matches: number
  time_window_hours: number
  generation_timestamp?: number
}

export function DailyRecapRealtime() {
  const [recapData, setRecapData] = useState<RecapData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null)

  const fetchRecapData = async () => {
    try {
      setLoading(true)
      setError(null)

      console.log("🔄 [Client] Fetching latest daily recap...")
      
      const response = await fetch("/api/daily-recap/saved", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
        // Add cache busting to ensure fresh data
        cache: "no-store",
      })

      if (!response.ok) {
        if (response.status === 404) {
          console.log("📭 [Client] No saved recap found")
          setRecapData(null)
          setLastUpdated(new Date())
          return
        }
        throw new Error(`Failed to fetch recap: ${response.status}`)
      }

      const data = await response.json()
      console.log("✅ [Client] Fetched recap data:", {
        date: data.date,
        teamCount: data.team_recaps?.length || 0,
        totalMatches: data.total_matches || 0,
        timeWindow: data.time_window_hours || "unknown",
      })

      setRecapData(data)
      setLastUpdated(new Date())
    } catch (err: any) {
      console.error("❌ [Client] Error fetching recap:", err)
      setError(err.message || "Failed to fetch daily recap")
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchRecapData()
    
    // Set up periodic refresh every 30 seconds
    const interval = setInterval(fetchRecapData, 30000)
    
    return () => clearInterval(interval)
  }, [])

  if (loading && !recapData) {
    return <LoadingSkeleton />
  }

  if (error) {
    return (
      <Card className="hockey-card border-red-200/50 dark:border-red-700/50 bg-gradient-to-br from-red-50 to-red-100/50 dark:from-red-900/20 dark:to-red-800/20">
        <CardContent className="text-center py-12">
          <div className="p-6 bg-gradient-to-r from-red-500/20 to-red-500/20 rounded-full w-fit mx-auto mb-6">
            <AlertCircle className="h-16 w-16 text-red-600 dark:text-red-400" />
          </div>
          <h2 className="text-2xl font-bold text-red-800 dark:text-red-200 mb-3">Error Loading Recap</h2>
          <p className="text-red-600 dark:text-red-400 mb-4 max-w-md mx-auto">
            {error}
          </p>
          <Button 
            onClick={fetchRecapData}
            disabled={loading}
            className="bg-red-600 hover:bg-red-700 text-white"
          >
            {loading ? (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
            ) : (
              <RefreshCw className="h-4 w-4 mr-2" />
            )}
            Try Again
          </Button>
        </CardContent>
      </Card>
    )
  }

  if (!recapData) {
    return (
      <Card className="hockey-card border-ice-blue-200/50 dark:border-rink-blue-700/50 bg-gradient-to-br from-white to-ice-blue-50/50 dark:from-hockey-silver-900 dark:to-rink-blue-900/20">
        <CardContent className="text-center py-12">
          <div className="p-6 bg-gradient-to-r from-hockey-silver-500/20 to-hockey-silver-500/20 rounded-full w-fit mx-auto mb-6">
            <BarChart3 className="h-16 w-16 text-hockey-silver-600 dark:text-hockey-silver-400" />
          </div>
          <h2 className="text-2xl font-bold text-hockey-silver-800 dark:text-hockey-silver-200 mb-3">No Daily Recap Available</h2>
          <p className="text-hockey-silver-600 dark:text-hockey-silver-400 mb-4 max-w-md mx-auto">
            Daily recaps are generated by administrators and will appear here once available.
          </p>
          <div className="mt-6 p-4 bg-gradient-to-r from-ice-blue-100 to-rink-blue-100 dark:from-ice-blue-900/30 dark:to-rink-blue-900/30 rounded-xl border border-ice-blue-200/50 dark:border-rink-blue-700/50 max-w-md mx-auto">
            <p className="text-sm text-ice-blue-700 dark:text-ice-blue-300">
              <strong>For Admins:</strong> Generate a recap from the admin panel (/admin → Daily Recap) to see it here.
            </p>
          </div>
          <Button 
            onClick={fetchRecapData}
            disabled={loading}
            variant="outline"
            className="mt-4"
          >
            {loading ? (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2"></div>
            ) : (
              <RefreshCw className="h-4 w-4 mr-2" />
            )}
            Check for Updates
          </Button>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      {/* Auto-refresh indicator */}
      {lastUpdated && (
        <Alert className="border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-900/20">
          <CheckCircle className="h-4 w-4 text-green-600" />
          <AlertTitle>Live Data</AlertTitle>
          <AlertDescription className="flex items-center justify-between">
            <span>
              Last updated: {lastUpdated.toLocaleTimeString()}. This page automatically refreshes every 30 seconds.
            </span>
            <Button 
              onClick={fetchRecapData}
              disabled={loading}
              size="sm"
              variant="outline"
              className="ml-4"
            >
              {loading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current"></div>
              ) : (
                <RefreshCw className="h-4 w-4" />
              )}
            </Button>
          </AlertDescription>
        </Alert>
      )}

      <DailyRecapDisplay recapData={recapData} showFullRoster={true} />
    </div>
  )
}

function LoadingSkeleton() {
  return (
    <div className="space-y-8">
      {/* Loading Header */}
      <div className="text-center py-8">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-ice-blue-600 mx-auto mb-4"></div>
        <h1 className="text-3xl font-bold text-hockey-silver-800 dark:text-hockey-silver-200 mb-2">Loading Daily Recap</h1>
        <p className="text-hockey-silver-600 dark:text-hockey-silver-400">Analyzing recent matches and team performances...</p>
      </div>

      {/* Loading Summary Card */}
      <Card className="hockey-card border-ice-blue-200/50 dark:border-rink-blue-700/50 bg-gradient-to-br from-white to-ice-blue-50/50 dark:from-hockey-silver-900 dark:to-rink-blue-900/20">
        <CardContent className="p-6">
          <Skeleton className="h-8 w-64 mb-2 bg-gradient-to-br from-ice-blue-100 to-rink-blue-100 dark:from-ice-blue-900/30 dark:to-rink-blue-900/30" />
          <Skeleton className="h-4 w-96 mb-4 bg-gradient-to-br from-ice-blue-100 to-rink-blue-100 dark:from-ice-blue-900/30 dark:to-rink-blue-900/30" />
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Skeleton className="h-24 w-full rounded-lg bg-gradient-to-br from-ice-blue-100 to-rink-blue-100 dark:from-ice-blue-900/30 dark:to-rink-blue-900/30" />
            <Skeleton className="h-24 w-full rounded-lg bg-gradient-to-br from-ice-blue-100 to-rink-blue-100 dark:from-ice-blue-900/30 dark:to-rink-blue-900/30" />
          </div>
        </CardContent>
      </Card>

      {/* Loading Team Cards */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {[1, 2, 3, 4].map((i) => (
          <Card key={i} className="hockey-card border-ice-blue-200/50 dark:border-rink-blue-700/50 bg-gradient-to-br from-white to-ice-blue-50/50 dark:from-hockey-silver-900 dark:to-rink-blue-900/20">
            <CardContent className="p-6">
              <Skeleton className="h-6 w-32 mb-2 bg-gradient-to-br from-ice-blue-100 to-rink-blue-100 dark:from-ice-blue-900/30 dark:to-rink-blue-900/30" />
              <Skeleton className="h-4 w-48 mb-4 bg-gradient-to-br from-ice-blue-100 to-rink-blue-100 dark:from-ice-blue-900/30 dark:to-rink-blue-900/30" />
              <div className="space-y-2">
                <Skeleton className="h-4 w-full rounded bg-gradient-to-br from-ice-blue-100 to-rink-blue-100 dark:from-ice-blue-900/30 dark:to-rink-blue-900/30" />
                <Skeleton className="h-4 w-full rounded bg-gradient-to-br from-ice-blue-100 to-rink-blue-100 dark:from-ice-blue-900/30 dark:to-rink-blue-900/30" />
                <Skeleton className="h-4 w-3/4 rounded bg-gradient-to-br from-ice-blue-100 to-rink-blue-100 dark:from-ice-blue-900/30 dark:to-rink-blue-900/30" />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}
