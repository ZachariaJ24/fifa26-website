import { Suspense } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Skeleton } from "@/components/ui/skeleton"
import DailyRecapDisplay from "@/components/shared/daily-recap-display"
import { createClient } from "@supabase/supabase-js"

// Server-side function to get the most recent daily recap
async function getDailyRecap() {
  try {
    console.log("üîç [Server] Fetching most recent daily recap from database...")

    // Use service role key for server-side access
    const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!)

    // Get the most recent recap
    const { data, error } = await supabase
      .from("daily_recaps")
      .select("id, date, recap_data, created_at, updated_at")
      .order("updated_at", { ascending: false })
      .limit(1)

    if (error) {
      console.error("‚ùå [Server] Database error:", error)
      return null
    }

    if (!data || data.length === 0) {
      console.log("üì≠ [Server] No saved recap found in database")
      return null
    }

    const recap = data[0]
    console.log("‚úÖ [Server] Found saved recap:", {
      id: recap.id,
      date: recap.date,
      updated_at: recap.updated_at,
      hasRecapData: !!recap.recap_data,
      teamCount: recap.recap_data?.team_recaps?.length || 0,
      timeWindow: recap.recap_data?.time_window_hours || "unknown",
      totalMatches: recap.recap_data?.total_matches || 0,
    })

    // Validate recap data structure
    if (!recap.recap_data || !recap.recap_data.team_recaps) {
      console.error("‚ùå [Server] Invalid recap data structure:", recap.recap_data)
      return null
    }

    // Ensure time window is set
    if (!recap.recap_data.time_window_hours) {
      console.warn("‚ö†Ô∏è [Server] Setting default time window to 24 hours")
      recap.recap_data.time_window_hours = 24
    }

    console.log("‚úÖ [Server] Returning valid recap data with", recap.recap_data.team_recaps.length, "teams")
    return recap.recap_data
  } catch (error) {
    console.error("‚ùå [Server] Error fetching daily recap:", error)
    return null
  }
}

function LoadingSkeleton() {
  return (
    <div className="space-y-6">
      <Card>
        <CardContent className="p-6">
          <Skeleton className="h-8 w-64 mb-2" />
          <Skeleton className="h-4 w-96 mb-4" />
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Skeleton className="h-24 w-full" />
            <Skeleton className="h-24 w-full" />
          </div>
        </CardContent>
      </Card>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {[1, 2, 3, 4].map((i) => (
          <Card key={i}>
            <CardContent className="p-6">
              <Skeleton className="h-6 w-32 mb-2" />
              <Skeleton className="h-4 w-48 mb-4" />
              <div className="space-y-2">
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-3/4" />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}

async function DailyRecapContent() {
  const recapData = await getDailyRecap()

  if (!recapData) {
    return (
      <Card>
        <CardContent className="text-center py-8">
          <p className="text-muted-foreground mb-2">No daily recap available yet.</p>
          <p className="text-sm text-muted-foreground">
            Daily recaps are generated by administrators and will appear here once available.
          </p>
          <div className="mt-4 p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg">
            <p className="text-xs text-blue-600 dark:text-blue-400">
              <strong>For Admins:</strong> Generate a recap from the admin panel (/admin ‚Üí Daily Recap) to see it here.
            </p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return <DailyRecapDisplay recapData={recapData} showFullRoster={true} />
}

export default function DailyRecapPage() {
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold">Daily Recap</h1>
        <p className="text-muted-foreground mt-2">
          Comprehensive AI-powered analysis of recent matches and team performances
        </p>
      </div>

      <Suspense fallback={<LoadingSkeleton />}>
        <DailyRecapContent />
      </Suspense>
    </div>
  )
}

// Force dynamic rendering to ensure fresh data
export const dynamic = "force-dynamic"
export const revalidate = 0
